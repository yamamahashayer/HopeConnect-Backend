[1mdiff --cc src/main/java/com/example/HopeConnect/Models/User.java[m
[1mindex f20a899,377ca2a..0000000[m
[1m--- a/src/main/java/com/example/HopeConnect/Models/User.java[m
[1m+++ b/src/main/java/com/example/HopeConnect/Models/User.java[m
[36m@@@ -4,34 -3,35 +4,42 @@@[m [mimport com.example.HopeConnect.Enumes.U[m
  import jakarta.persistence.*;[m
  import java.time.LocalDateTime;[m
  [m
[32m+ [m
  @Entity[m
[32m++<<<<<<< HEAD:src/main/java/com/example/HopeConnect/Models/User.java[m
[32m++=======[m
[32m+ @Inheritance(strategy = InheritanceType.JOINED)[m
[32m++>>>>>>> Yamamah:src/main/java/com/example/HopeConnect/Models/Entity/User.java[m
  @Table(name = "users")[m
  public class User {[m
  [m
      @Id[m
      @GeneratedValue(strategy = GenerationType.IDENTITY)[m
      private Long id;[m
[32m++<<<<<<< HEAD:src/main/java/com/example/HopeConnect/Models/User.java[m
[32m +[m
[32m++=======[m
[32m++>>>>>>> Yamamah:src/main/java/com/example/HopeConnect/Models/Entity/User.java[m
      @Column(nullable = false, length = 100)[m
[31m -    private String name; // User name[m
[32m +    private String name;[m
  [m
      @Column(nullable = false, unique = true, length = 150)[m
[31m -    private String email; // Unique email[m
[32m +    private String email;[m
  [m
      @Column(nullable = false, length = 255)[m
[31m -    private String password; // User password[m
[32m +    private String password;[m
  [m
[31m -    @Column(nullable = false, length = 20)[m
[31m -    private String phone; // Phone number[m
[32m +    @Column(length = 20)[m
[32m +    private String phone;[m
  [m
[31m -    @Column(nullable = false, length = 50)[m
[31m -    private String nationality; // Nationality[m
[32m +    @Column(length = 50)[m
[32m +    private String nationality;[m
  [m
[31m -    @Column(nullable = false, length = 50)[m
[31m -    private String country; // Country[m
[32m +    @Column(length = 50)[m
[32m +    private String country;[m
  [m
[31m -    @Column(nullable = false, length = 50)[m
[31m -    private String city; // City[m
[32m +    @Column(length = 50)[m
[32m +    private String city;[m
  [m
      @Enumerated(EnumType.STRING)[m
      @Column(nullable = false)[m
[1mdiff --cc src/main/java/com/example/HopeConnect/Services/UserServices.java[m
[1mindex 9e00e27,2acd12a..0000000[m
[1m--- a/src/main/java/com/example/HopeConnect/Services/UserServices.java[m
[1m+++ b/src/main/java/com/example/HopeConnect/Services/UserServices.java[m
[36m@@@ -85,17 -41,25 +85,34 @@@[m [mpublic class UserServices [m
          }[m
      }[m
  [m
[32m++<<<<<<< HEAD[m
[32m +    // إنشاء مستخدم جديد[m
[32m +    public User createUser(User user) {[m
[32m++=======[m
[32m+     public String createUser(User user) {[m
[32m++>>>>>>> Yamamah[m
          try {[m
[31m-             return userRepository.save(user);[m
[32m+             // التحقق مما إذا كان البريد الإلكتروني مسجلاً بالفعل[m
[32m+             Optional<User> existingUser = userRepository.findByEmail(user.getEmail());[m
[32m+ [m
[32m+             if (existingUser.isPresent()) {[m
[32m+                 return "Error: Email already exists. Please use a different email.";[m
[32m+             }[m
[32m+ [m
[32m+             // حفظ المستخدم الجديد[m
[32m+             user = userRepository.save(user);[m
[32m+             return "User created successfully with ID: " + user.getId();[m
          } catch (Exception e) {[m
[31m-             logger.error("Error while creating user: ", e);[m
[31m-             throw new RuntimeException("Error while creating user: " + e.getMessage());[m
[32m+             logger.error("Error while creating user: {}", e.getMessage(), e);[m
[32m+             return "Error: " + e.getMessage();[m
          }[m
      }[m
  [m
[32m++<<<<<<< HEAD[m
[32m +    // حذف مستخدم بواسطة الـ ID[m
[32m++=======[m
[32m+ [m
[32m++>>>>>>> Yamamah[m
      public ResponseEntity<Map<String, Object>> deleteUser(Long id) {[m
          try {[m
              Optional<User> user = userRepository.findById(id);[m
[36m@@@ -163,5 -124,4 +180,8 @@@[m
          }[m
      }[m
  [m
[32m++<<<<<<< HEAD[m
[32m +[m
[32m++=======[m
[32m++>>>>>>> Yamamah[m
  }[m
[1mdiff --cc src/main/resources/application.properties[m
[1mindex 7b9e356,52ea2fc..0000000[m
[1m--- a/src/main/resources/application.properties[m
[1m+++ b/src/main/resources/application.properties[m
[36m@@@ -10,15 -10,8 +10,19 @@@[m [mspring.autoconfigure.exclude=org.spring[m
  spring.main.allow-bean-definition-overriding=true[m
  spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect[m
  [m
[32m +spring.mail.host=smtp.gmail.com[m
[32m +spring.mail.port=587[m
[32m +spring.mail.username=s12113501@stu.najah.edu # البريد الإلكتروني الذي ستستخدمه لإرسال الرسائل[m
[32m +spring.mail.password=bke@29081 # كلمة مرور البريد الإلكتروني[m
[32m +spring.mail.protocol=smtp[m
[32m +spring.mail.smtp.auth=true[m
[32m +spring.mail.smtp.starttls.enable=true[m
  [m
[32m++<<<<<<< HEAD[m
[32m +server.port=7766[m
[32m++=======[m
[32m+ server.port=3080[m
[32m++>>>>>>> Yamamah[m
  [m
  [m
  [m
* Unmerged path src/main/java/com/example/HopeConnect/Controllers/VolunteerController.java
* Unmerged path src/main/java/com/example/HopeConnect/Models/Entity/Volunteer.java
* Unmerged path src/main/java/com/example/HopeConnect/Repositories/VolunteerRepository.java
* Unmerged path src/main/java/com/example/HopeConnect/Services/VolunteerService.java
